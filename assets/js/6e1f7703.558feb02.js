"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[328],{7542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"templates/use_ports","title":"Port reservations","description":"Port reservations allow you to dynamically assign and manage ports for your Kubernetes services. This guide explains how to use port claims in your templates.","source":"@site/docs/templates/use_ports.md","sourceDirName":"templates","slug":"/templates/use_ports","permalink":"/docs/templates/use_ports","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Blade templating","permalink":"/docs/templates/use_blade"},"next":{"title":"Roles and permissions","permalink":"/docs/roles_and_permissions"}}');var r=t(4848),s=t(8453);const a={sidebar_position:4},o="Port reservations",l={},c=[{value:"How Port Claims Work",id:"how-port-claims-work",level:2},{value:"Defining Port Claims",id:"defining-port-claims",level:2},{value:"Using Port Claims in Templates",id:"using-port-claims-in-templates",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Multiple Port Claims",id:"multiple-port-claims",level:3},{value:"Conditional Port Usage",id:"conditional-port-usage",level:3},{value:"Port Groups",id:"port-groups",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example Use Cases",id:"example-use-cases",level:2},{value:"Web Application",id:"web-application",level:3},{value:"Monitoring Stack",id:"monitoring-stack",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"port-reservations",children:"Port reservations"})}),"\n",(0,r.jsx)(n.p,{children:"Port reservations allow you to dynamically assign and manage ports for your Kubernetes services. This guide explains how to use port claims in your templates."}),"\n",(0,r.jsx)(n.h2,{id:"how-port-claims-work",children:"How Port Claims Work"}),"\n",(0,r.jsx)(n.p,{children:"Port claims are a way to dynamically assign ports to your services. When you define a port claim in your template, the system will:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Check if a port is already reserved for this claim"}),"\n",(0,r.jsx)(n.li,{children:"If not, generate a random port from the specified port group"}),"\n",(0,r.jsx)(n.li,{children:"Store the port reservation for future use"}),"\n",(0,r.jsxs)(n.li,{children:["Make the assigned port available in your template via ",(0,r.jsx)(n.code,{children:"$portClaims"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"defining-port-claims",children:"Defining Port Claims"}),"\n",(0,r.jsx)(n.p,{children:"In your template, you can define port claims in the template configuration. Each port claim must specify:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A unique claim name"}),"\n",(0,r.jsx)(n.li,{children:"A port group (e.g., 'http', 'tcp', 'udp')"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-port-claims-in-templates",children:"Using Port Claims in Templates"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: web-service\nspec:\n  ports:\n  - name: http\n    port: {{ $portClaims['web'] }}\n    targetPort: 80\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multiple-port-claims",children:"Multiple Port Claims"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: monitoring-service\nspec:\n  ports:\n  - name: metrics\n    port: {{ $portClaims['metrics'] }}\n    targetPort: 9090\n  - name: health\n    port: {{ $portClaims['health'] }}\n    targetPort: 8080\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-port-usage",children:"Conditional Port Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: conditional-service\nspec:\n  ports:\n  @if(isset($portClaims['optional']))\n  - name: optional\n    port: {{ $portClaims['optional'] }}\n    targetPort: 3000\n  @endif\n  - name: required\n    port: {{ $portClaims['required'] }}\n    targetPort: 8080\n"})}),"\n",(0,r.jsx)(n.h2,{id:"port-groups",children:"Port Groups"}),"\n",(0,r.jsx)(n.p,{children:"Port groups help organize and manage port assignments. Common port groups include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"http"}),": For HTTP/HTTPS services (typically 80-443)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tcp"}),": For general TCP services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"udp"}),": For UDP services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"custom"}),": For custom port ranges"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Use meaningful claim names that describe the service purpose"}),"\n",(0,r.jsx)(n.li,{children:"Group related ports together using appropriate port groups"}),"\n",(0,r.jsx)(n.li,{children:"Document port claims in your template documentation"}),"\n",(0,r.jsx)(n.li,{children:"Consider port conflicts when designing your services"}),"\n",(0,r.jsx)(n.li,{children:"Use conditional port claims for optional services"}),"\n",(0,r.jsx)(n.li,{children:"Always validate port availability in your templates"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"web-application",children:"Web Application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: web-app\nspec:\n  ports:\n  - name: http\n    port: {{ $portClaims['web'] }}\n    targetPort: 80\n  - name: https\n    port: {{ $portClaims['https'] }}\n    targetPort: 443\n"})}),"\n",(0,r.jsx)(n.h3,{id:"monitoring-stack",children:"Monitoring Stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: monitoring\nspec:\n  ports:\n  - name: prometheus\n    port: {{ $portClaims['prometheus'] }}\n    targetPort: 9090\n  - name: grafana\n    port: {{ $portClaims['grafana'] }}\n    targetPort: 3000\n  - name: alertmanager\n    port: {{ $portClaims['alertmanager'] }}\n    targetPort: 9093\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);