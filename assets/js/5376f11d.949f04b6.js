"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[984],{580:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"templates/create_manually","title":"Create","description":"This guide explains how to create application templates manually. Templates are used to generate Kubernetes manifests that can be deployed using GitOps tools like FluxCD or ArgoCD.","source":"@site/docs/templates/create_manually.md","sourceDirName":"templates","slug":"/templates/create_manually","permalink":"/docs/templates/create_manually","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Templates","permalink":"/docs/category/templates"},"next":{"title":"Import from Helm chart","permalink":"/docs/templates/create_import"}}');var s=i(4848),a=i(8453);const r={sidebar_position:1},l="Create",c={},o=[{value:"Template Structure",id:"template-structure",level:2},{value:"Template Configuration",id:"template-configuration",level:3},{value:"Kubernetes Manifests",id:"kubernetes-manifests",level:3},{value:"Template Rendering Process",id:"template-rendering-process",level:2},{value:"Using Kustomize",id:"using-kustomize",level:2},{value:"Creating Dynamic Manifests",id:"creating-dynamic-manifests",level:2},{value:"Basic Resource Definition",id:"basic-resource-definition",level:3},{value:"Service Definition with Port Claims",id:"service-definition-with-port-claims",level:3},{value:"Secret Management",id:"secret-management",level:3},{value:"GitOps Integration",id:"gitops-integration",level:2},{value:"FluxCD",id:"fluxcd",level:3},{value:"ArgoCD",id:"argocd",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"create",children:"Create"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explains how to create application templates manually. Templates are used to generate Kubernetes manifests that can be deployed using GitOps tools like FluxCD or ArgoCD."}),"\n",(0,s.jsx)(n.h2,{id:"template-structure",children:"Template Structure"}),"\n",(0,s.jsx)(n.p,{children:"A template consists of two main parts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Template Configuration: Defines metadata, variables, and behavior"}),"\n",(0,s.jsx)(n.li,{children:"Kubernetes Manifests: The actual resources to be deployed"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"template-configuration",children:"Template Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The template configuration is defined in a web UI that describes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Template metadata (name, description, version)"}),"\n",(0,s.jsx)(n.li,{children:"Required variables"}),"\n",(0,s.jsx)(n.li,{children:"Port claims"}),"\n",(0,s.jsx)(n.li,{children:"Resource limits"}),"\n",(0,s.jsx)(n.li,{children:"Optional Helm chart import settings"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-manifests",children:"Kubernetes Manifests"}),"\n",(0,s.jsxs)(n.p,{children:["The actual Kubernetes manifests are written using ",(0,s.jsx)(n.a,{href:"/docs/templates/use_blade",children:"Blade templating"})," to make them dynamic. These files are typically organized in a directory structure:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"template/\n\u251c\u2500\u2500 config.yaml           # Template configuration\n\u251c\u2500\u2500 kustomization.yaml    # Kustomize configuration\n\u251c\u2500\u2500 namespace.yaml        # Namespace definition\n\u251c\u2500\u2500 deployment.yaml       # Deployment manifest\n\u251c\u2500\u2500 service.yaml         # Service manifest\n\u2514\u2500\u2500 other-resources/     # Additional resources\n    \u251c\u2500\u2500 configmap.yaml\n    \u2514\u2500\u2500 secret.yaml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"template-rendering-process",children:"Template Rendering Process"}),"\n",(0,s.jsx)(n.p,{children:"When a template is used to create a deployment, the following process occurs:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The template configuration is validated"}),"\n",(0,s.jsx)(n.li,{children:"Required variables are checked"}),"\n",(0,s.jsxs)(n.li,{children:["Port claims are resolved (see ",(0,s.jsx)(n.a,{href:"/docs/templates/use_ports",children:"Port reservations"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Each manifest file is processed using the Blade templating engine"}),"\n",(0,s.jsx)(n.li,{children:"The rendered manifests are organized according to the kustomization.yaml"}),"\n",(0,s.jsx)(n.li,{children:"The final output is committed to the Git repository"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-kustomize",children:"Using Kustomize"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"kustomization.yaml"})," file is crucial for organizing and customizing the generated manifests. It allows you to:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reference all resources"}),"\n",(0,s.jsx)(n.li,{children:"Set common labels and annotations"}),"\n",(0,s.jsx)(n.li,{children:"Define namespace"}),"\n",(0,s.jsx)(n.li,{children:"Apply patches and overlays"}),"\n",(0,s.jsx)(n.li,{children:"Manage resource dependencies"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\n# Set the namespace (usually auto-generated)\nnamespace: {{ $data['namespace'] }}\n\n# Reference all resources\nresources:\n  - namespace.yaml\n  - deployment.yaml\n  - service.yaml\n  - other-resources/configmap.yaml\n  - other-resources/secret.yaml\n\n# Common labels\ncommonLabels:\n  app.kubernetes.io/name: {{ $data['app_name'] }}\n  app.kubernetes.io/instance: {{ $data['instance'] }}\n\n# Common annotations\ncommonAnnotations:\n  description: \"{{ $data['description'] }}\"\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-dynamic-manifests",children:"Creating Dynamic Manifests"}),"\n",(0,s.jsx)(n.h3,{id:"basic-resource-definition",children:"Basic Resource Definition"}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.a,{href:"/docs/templates/use_blade",children:"Blade templating"}),", you can create dynamic manifests:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $data['app_name'] }}\n  labels:\n    app: {{ $data['app_name'] }}\nspec:\n  replicas: {{ $data['replicas'] ?? 1 }}\n  selector:\n    matchLabels:\n      app: {{ $data['app_name'] }}\n  template:\n    metadata:\n      labels:\n        app: {{ $data['app_name'] }}\n    spec:\n      containers:\n      - name: {{ $data['app_name'] }}\n        image: {{ $data['image'] }}\n        @if($limits['enabled'])\n        resources:\n          limits:\n            cpu: {{ $limits['cpu'] }}\n            memory: {{ $limits['memory'] }}\n        @endif\n        ports:\n        - name: http\n          containerPort: {{ $data['port'] ?? 80 }}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-definition-with-port-claims",children:"Service Definition with Port Claims"}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.a,{href:"/docs/templates/use_ports",children:"port reservations"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ $data['app_name'] }}-service\nspec:\n  selector:\n    app: {{ $data['app_name'] }}\n  ports:\n  - name: http\n    port: {{ $portClaims['web'] }}\n    targetPort: {{ $data['port'] ?? 80 }}\n  @if(isset($portClaims['metrics']))\n  - name: metrics\n    port: {{ $portClaims['metrics'] }}\n    targetPort: {{ $data['metrics_port'] ?? 9090 }}\n  @endif\n"})}),"\n",(0,s.jsx)(n.h3,{id:"secret-management",children:"Secret Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ $data['app_name'] }}-secrets\ntype: Opaque\ndata:\n  @foreach($secret as $key => $value)\n  {{ $key }}: {{ base64_encode($value) }}\n  @endforeach\n"})}),"\n",(0,s.jsx)(n.h2,{id:"gitops-integration",children:"GitOps Integration"}),"\n",(0,s.jsx)(n.p,{children:"The generated manifests can be used with any GitOps tool that supports Kubernetes manifests. Here are some common patterns:"}),"\n",(0,s.jsx)(n.h3,{id:"fluxcd",children:"FluxCD"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://fluxcd.io/",children:"FluxCD"})," will automatically detect and apply the manifests in the Git repository. The ",(0,s.jsx)(n.code,{children:"kustomization.yaml"})," helps FluxCD understand the resource hierarchy and dependencies. FluxCD is a set of continuous and progressive delivery solutions for Kubernetes that are open and extensible."]}),"\n",(0,s.jsx)(n.p,{children:"Key features that make it work well with our templates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Native support for Kustomize"}),"\n",(0,s.jsx)(n.li,{children:"Automated manifest reconciliation"}),"\n",(0,s.jsx)(n.li,{children:"Health assessment"}),"\n",(0,s.jsx)(n.li,{children:"Dependency management"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fluxcd.io/flux/guides/",children:"FluxCD Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"argocd",children:"ArgoCD"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://argoproj.github.io/cd/",children:"ArgoCD"})," can use the same manifests, with the ",(0,s.jsx)(n.code,{children:"kustomization.yaml"})," helping to manage the application state and sync status. ArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes."]}),"\n",(0,s.jsx)(n.p,{children:"Key features that make it work well with our templates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Declarative application management"}),"\n",(0,s.jsx)(n.li,{children:"Automated sync policies"}),"\n",(0,s.jsx)(n.li,{children:"Health status monitoring"}),"\n",(0,s.jsx)(n.li,{children:"RBAC integration"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://argo-cd.readthedocs.io/",children:"ArgoCD Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Both tools can work with the same template structure, making your templates portable across different GitOps implementations."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Template Organization"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep related resources together"}),"\n",(0,s.jsx)(n.li,{children:"Use meaningful file names"}),"\n",(0,s.jsx)(n.li,{children:"Document all variables and their purposes"}),"\n",(0,s.jsx)(n.li,{children:"Include example configurations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Variable Management"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Define clear variable names"}),"\n",(0,s.jsx)(n.li,{children:"Provide default values where appropriate"}),"\n",(0,s.jsx)(n.li,{children:"Document required variables"}),"\n",(0,s.jsx)(n.li,{children:"Use type hints in documentation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Resource Management"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use kustomize for common configurations"}),"\n",(0,s.jsx)(n.li,{children:"Keep resources modular and reusable"}),"\n",(0,s.jsx)(n.li,{children:"Document resource dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Include health checks and probes"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Never hardcode sensitive information"}),"\n",(0,s.jsx)(n.li,{children:"Use secrets for sensitive data"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper RBAC"}),"\n",(0,s.jsx)(n.li,{children:"Follow the principle of least privilege"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Maintenance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Version your templates"}),"\n",(0,s.jsx)(n.li,{children:"Document changes"}),"\n",(0,s.jsx)(n.li,{children:"Include upgrade paths"}),"\n",(0,s.jsx)(n.li,{children:"Test with different configurations"}),"\n"]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);