"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[950],{6706:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"templates/use_blade","title":"Blade templating","description":"Blade templating allows you to create dynamic Kubernetes manifests by using variables and control structures. This guide explains how to use Blade templating effectively in your Kubernetes manifests.","source":"@site/docs/templates/use_blade.md","sourceDirName":"templates","slug":"/templates/use_blade","permalink":"/docs/templates/use_blade","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Synchronize from Git repository","permalink":"/docs/templates/create_sync"},"next":{"title":"Port reservations","permalink":"/docs/templates/use_ports"}}');var i=n(4848),l=n(8453);const t={sidebar_position:3},r="Blade templating",o={},c=[{value:"Available Variables",id:"available-variables",level:2},{value:"Data Variables",id:"data-variables",level:3},{value:"Secret Variables",id:"secret-variables",level:3},{value:"Port Claims",id:"port-claims",level:3},{value:"Deployment Status",id:"deployment-status",level:3},{value:"Resource Limits",id:"resource-limits",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Variable Usage",id:"basic-variable-usage",level:3},{value:"Using Secrets",id:"using-secrets",level:3},{value:"Port Configuration",id:"port-configuration",level:3},{value:"Conditional Resource Limits",id:"conditional-resource-limits",level:3},{value:"Pause Control",id:"pause-control",level:3},{value:"Control Structures",id:"control-structures",level:2},{value:"If Statements",id:"if-statements",level:3},{value:"Loops",id:"loops",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"blade-templating",children:"Blade templating"})}),"\n",(0,i.jsx)(a.p,{children:"Blade templating allows you to create dynamic Kubernetes manifests by using variables and control structures. This guide explains how to use Blade templating effectively in your Kubernetes manifests."}),"\n",(0,i.jsx)(a.h2,{id:"available-variables",children:"Available Variables"}),"\n",(0,i.jsx)(a.p,{children:"The following variables are available in your templates:"}),"\n",(0,i.jsx)(a.h3,{id:"data-variables",children:"Data Variables"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"{{ $data['your_variable'] }}\n"})}),"\n",(0,i.jsx)(a.p,{children:"Use this to access regular variables passed to your template."}),"\n",(0,i.jsx)(a.h3,{id:"secret-variables",children:"Secret Variables"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"{{ $secret['your_secret'] }}\n"})}),"\n",(0,i.jsx)(a.p,{children:"Use this to access secret variables. These will be automatically converted to Kubernetes secrets."}),"\n",(0,i.jsx)(a.h3,{id:"port-claims",children:"Port Claims"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"{{ $portClaims['your_port_claim'] }}\n"})}),"\n",(0,i.jsx)(a.p,{children:"Access dynamically assigned port numbers for your services."}),"\n",(0,i.jsxs)(a.p,{children:["For detailed information about port claims and port management, see ",(0,i.jsx)(a.a,{href:"/docs/templates/use_ports",children:"Port reservations"}),"."]}),"\n",(0,i.jsx)(a.h3,{id:"deployment-status",children:"Deployment Status"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"{{ $paused ? 'true' : 'false' }}\n"})}),"\n",(0,i.jsx)(a.p,{children:"Boolean value indicating whether the deployment is paused."}),"\n",(0,i.jsx)(a.h3,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"{{ $limits['enabled'] }}  # 'true' or 'false'\n{{ $limits['cpu'] }}     # CPU limit\n{{ $limits['memory'] }}  # Memory limit\n"})}),"\n",(0,i.jsx)(a.p,{children:"Access deployment resource limits."}),"\n",(0,i.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(a.h3,{id:"basic-variable-usage",children:"Basic Variable Usage"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $data['app_name'] }}\nspec:\n  replicas: {{ $data['replicas'] }}\n  template:\n    spec:\n      containers:\n      - name: {{ $data['container_name'] }}\n        image: {{ $data['image'] }}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"using-secrets",children:"Using Secrets"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\ndata:\n  database-url: {{ base64_encode($secret['database_url']) }}\n  api-key: {{ base64_encode($secret['api_key']) }}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"port-configuration",children:"Port Configuration"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: app-service\nspec:\n  ports:\n  - port: {{ $portClaims['http'] }}\n    targetPort: 80\n"})}),"\n",(0,i.jsx)(a.h3,{id:"conditional-resource-limits",children:"Conditional Resource Limits"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      containers:\n      - name: app\n        resources:\n          @if($limits['enabled'])\n          limits:\n            cpu: {{ $limits['cpu'] }}\n            memory: {{ $limits['memory'] }}\n          @endif\n"})}),"\n",(0,i.jsx)(a.h3,{id:"pause-control",children:"Pause Control"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nspec:\n  paused: {{ $paused ? 'true' : 'false' }}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"control-structures",children:"Control Structures"}),"\n",(0,i.jsx)(a.p,{children:"Blade supports various control structures that you can use in your templates:"}),"\n",(0,i.jsx)(a.h3,{id:"if-statements",children:"If Statements"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"@if($data['feature_enabled'])\n  # Your configuration here\n@else\n  # Alternative configuration\n@endif\n"})}),"\n",(0,i.jsx)(a.h3,{id:"loops",children:"Loops"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-yaml",children:"@foreach($data['volumes'] as $volume)\n- name: {{ $volume['name'] }}\n  mountPath: {{ $volume['path'] }}\n@endforeach\n"})}),"\n",(0,i.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsx)(a.li,{children:"Always validate your variables before using them"}),"\n",(0,i.jsx)(a.li,{children:"Use meaningful variable names"}),"\n",(0,i.jsx)(a.li,{children:"Keep templates modular and reusable"}),"\n",(0,i.jsx)(a.li,{children:"Document your template variables"}),"\n",(0,i.jsx)(a.li,{children:"Use proper indentation in your YAML files"}),"\n",(0,i.jsx)(a.li,{children:"Test your templates with different variable combinations"}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(a.p,{children:["For more detailed information about Blade templating, including additional directives, components, and advanced features, please refer to the ",(0,i.jsx)(a.a,{href:"https://laravel.com/docs/blade",children:"official Laravel Blade documentation"}),"."]})]})}function u(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>r});var s=n(6540);const i={},l=s.createContext(i);function t(e){const a=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:a},e.children)}}}]);